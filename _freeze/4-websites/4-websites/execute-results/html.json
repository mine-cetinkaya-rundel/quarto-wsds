{
  "hash": "c848d25380de2de8d8d85310de192866",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Websites\"\nsubtitle: \"Hello Quarto - A World of Possibilities<br>(for Reproducible Publishing)\"\nfooter: \"[mine.quarto.pub/quarto-wsds](https://mine.quarto.pub/quarto-wsds)\"\nformat:\n  revealjs:\n    author: \"Mine Ã‡etinkaya Rundel\"\n    institute: \"Duke University + Posit\"\n    transition: fade\n    slide-number: true\n    chalkboard: false\n    logo: \"../images/logo.png\"\n    theme: ../style/slides.scss\n---\n\n\n\n\n# Anatomy of a Quarto project\n\n## What defines a Quarto Project?\n\n::: r-fit-text\n> [A Quarto Project is a directory]{.fragment} [that contains a file called `_quarto.yml`.]{.fragment}\n:::\n\n\\\n\n::: columns\n::: {.column .fragment .fade-right width=\"50%\"}\nThis is a Quarto Project.\n\n![](images/quarto-project.png){.drop fig-alt=\"Files panel in RStudio showing my-doc.qmd and _quarto.yml.\"}\n:::\n\n::: {.column .fragment .fade-left width=\"50%\"}\nThis is not.\n\n![](images/not-quarto-project.png){.drop fig-alt=\"Files panel in RStudio showing only my-doc.qmd.\"}\n:::\n:::\n\n## \\_quarto.yml {auto-animate=\"true\"}\n\nA YAML file with particular keys and values that Quarto recognizes. Unrecognized keys are ignored.\n\n``` {.yaml .fragment filename=\"_quarto.yml\"}\nproject:\n  title: \"A Barebones Project\"\n```\n\n## Quarto Project vs RStudio Project\n\n::: columns\n::: {.column .incremental .smaller width=\"50%\"}\n-   Quarto Projects determine how `quarto render`, `quarto preview` and `quarto publish` work when run inside the directory.\n-   RStudio Projects store configuration info for the IDE when working from the directory.\n-   A directory can have one or both!\n:::\n\n::: {.column .fragment .fade-left width=\"50%\"}\n\\\n\n![](images/quarto-rstudio-project.png){.drop fig-alt=\"Files panel in RStudio showing my-doc.qmd, _quarto.yml, and an .Rproj file.\"}\n:::\n:::\n\n## Quarto projects\n\n-   Quarto projects have a `_quarto.yml` file\n\n-   The `type` field in this file indicates the type of project:\n\n    -   `default`: Collection of documents\n\n    -   `website`: Websites (and blogs)\n\n    -   `book`: Books\n\n    -   `manuscript`: Manuscripts (Quarto 1.4+)\n\n## Quarto websites\n\n-   Websites are essentially `format: html` + a Quarto Project file\n\n-   But a website is different than `format: html` in that it has multiple pages\n\n-   Websites are our first exploration into Quarto Projects\n\n-   Websites and books are very similar in that they associate multiple pages/resources into a connected resource\n\n## Our turn\n\n::: task\nLet's build a website together from all of the documents we've created so far and highlight the following features of Quarto websites:\n\n-   `_quarto.yml`\n\n-   `index.qmd` / landing page\n\n-   Navigation\n\n-   Freeze\n\n-   Publishing to QuartoPub\n\n-   An aspect of the workshop webpage that you fancy?\n:::\n\n# Computations\n\n## When should code be re-run? {.smaller}\n\n::: incremental\n-   You might have a reason to re-run all code in a Quarto website (every single chunk in every single document) every time you render the website.\n\n-   But, chances are, that's not what you want.\n\n    -   Just playing around styling -- you probably don't want to run the code again\n\n    -   Changed some code in a document -- you probably want to re-run the code in that document, but not necessarily others\n\n    -   Made a big change affecting computations on many or all pages -- you probably want to re-run all code\n\n-   `freeze` and `cache` options give you fine control over these decisions\n:::\n\n## Freeze {.smaller}\n\n-   The `freeze` option controls when/if computational documents be re-rendered during a global project render:\n\n``` yaml\nexecute:\n  freeze: true  # never re-render during project render\n```\n\n``` yaml\nexecute:\n  freeze: auto  # re-render only when source changes\n```\n\n``` yaml\nexecute:\n  freeze: false  # always re-render\n```\n\n-   The `freeze` option is typically added to a `_metadata.yml` file within a specific directory, affecting all files in that directory.\n\n-   For blogs, set `feeze` in `_metadata.yml` at the root of the `posts` directory.\n\n-   You can have it only within specific subdirectories for more complex sites.\n\n## Cache\n\n-   Cache stores the results of computations for a specific file.\n\n-   Cache invalidation is triggered by changes in chunk source code (or other cache attributes you've defined).\n\n-   `cache` can also be set at the chunk level. Consider using the cache for computationally expensive chunks.\n\n## Freeze vs. cache {.smaller}\n\n-   Freeze option is typically set\n\n    -   for the whole website in `_quarto.yml`, or\n\n    -   for files within a directory in `_metadata.yml` in that directory\n\n``` yaml\nexecute: \n  freeze: auto\n```\n\n-   Cache option is typically set for a given file or for individual chunk(s) in a file.\n\n``` yaml\nexecute:\n  cache: true\n```\n\nor\n\n\n::: {.cell hash='4-websites_cache/revealjs/unnamed-chunk-2_6fffd46ef28081789a149f39166ea4f6'}\n\n````{.cell-code}\n```{{r}}\n#| cache: true\n\n1 + 1\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n# Publishing\n\n## QuartoPub\n\n-   [Quarto Pub](https://quartopub.com/) is a free publishing service for content created with Quarto. It is ideal for blogs, course or project websites, books, presentations, and personal hobby sites.\n\n-   Publish with `quarto publish`:\n\n``` {.bash filename=\"Terminal\"}\nquarto publish quarto-pub\n```\n\n-   Gain a `_publish.yml` that is safe to check into version control.\n\n## Other venues\n\n-   GitHub Pages\n-   Posit Connect\n-   Netlify\n-   Confluence\n-   [More venues](https://quarto.org/docs/publishing/other.html)\n\n# Wrap up\n\n## Learn more\n\n::: learn-more\n[quarto.org/docs/websites](https://quarto.org/docs/websites/)\n\n\n```{=html}\n<iframe src=\"https://quarto.org/docs/websites\" width=\"100%\" height=\"500\" style=\"border:2px solid #123233;\" title=\"Quarto Journal Articles\"></iframe>\n```\n\n:::\n\n## Questions\n\n::: task\nAny questions / anything you'd like to review before we wrap up this module?\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}